{"mappings":"YAOA,MAAAA,mBAIQC,MAAMC,UAAUC,MAAMC,KAAKC,SAASC,iBAAiB,eAAeC,SAAQ,SAAUC,OAG9ER,EAAUQ,MAKtBC,YAAYD,GACRE,KAAKF,GAAKA,EACVE,KAAKC,cAAgBH,EAAGI,aAAa,uBAErCF,KAAKG,YAAeH,KAAKC,cAAiBD,KAAKC,cAAgBH,EAAGI,aAAa,qBAG/EF,KAAKI,SAAWb,MAAMC,UAAUC,MAAMC,KAAKI,EAAGF,iBAAiB,2BAI3DS,EAAOL,QACXA,KAAKI,SAASP,SAASS,IACnBA,EAAEC,UAAY,IAAMC,QAAQC,IAAI,uBAChCH,EAAEI,iBAAiB,SAAS,SAASC,GACjCH,QAAQC,IAAIE,EAAMC,eAClBJ,QAAQC,IAAIE,GACRA,EAAMC,cAAcC,UAAUC,SAAS,uBACvCT,EAAKU,aAAaJ,EAAMC,eAExBD,EAAMK,wBAOlBlB,EAAGY,iBAAiB,UAAWV,KAAKiB,eAAeC,KAAKlB,QAInDA,KAAKG,YAAAA,KAEFgB,EAAWrB,EAAGsB,cAAc,0BAG5BD,GACAA,EAASE,aAAa,gBAAiB,SAKnDJ,eAAeN,OACPW,EAASX,EAAMW,OACfC,EAAMZ,EAAMY,OAGZD,EAAOT,UAAUC,SAAS,4BAGlBS,OACC,cAEGC,GAAa,EAEbC,GAHQzB,KAAKI,SAASsB,QAAQJ,IAE9BK,EAAS3B,KAAKI,SAASuB,QACMH,GAAaG,EAE9C3B,KAAKI,SAASqB,GAAUG,QAExBjB,EAAMK,2BAEL,gBAGGW,EADAH,EAAY,EAEZC,GAHQzB,KAAKI,SAASsB,QAAQJ,IAE9BK,EAAS3B,KAAKI,SAASuB,QACMH,GAAaG,EAE9C3B,KAAKI,SAASqB,GAAUG,QAExBjB,EAAMK,2BAGL,OACDhB,KAAKI,SAAS,GAAGwB,kBAGhB,MACD5B,KAAKI,SAASJ,KAAKI,SAASuB,OAAS,GAAGC,kBAEvC,YACA,YACA,IACD5B,KAAKe,aAAaO,GAClBX,EAAMK,+BAINR,QAAQC,IAAIc,IAM5BR,aAAaO,OAELO,EAAqD,QAAxCP,EAAOQ,aAAa,iBACjCC,EAAS/B,KAAKF,GAAGsB,cAAc,2BAG9BpB,KAAKC,eAAiB8B,GAAUA,IAAWT,IAE5CS,EAAOV,aAAa,gBAAiB,SAErC1B,SAASqC,eAAeD,EAAOD,aAAa,kBAAkBT,aAAa,SAAU,IAGhFrB,KAAKG,aACN4B,EAAOE,gBAAgB,kBAI1BJ,EAaI7B,KAAKG,aAAe0B,GAEzBP,EAAOD,aAAa,gBAAiB,UAbrCC,EAAOD,aAAa,gBAAiB,QAOhCrB,KAAKG,aACNmB,EAAOD,aAAa,gBAAiB,UC1IrD,MAAAa,EACInC,kBACQoC,EAAOxC,SAASqC,eAAe,WAC/BI,EAASzC,SAASqC,eAAe,cACjCK,EAAUF,EAAKf,cAAc,YAC7BkB,EAAWF,EAAOhB,cAAc,aAEpCiB,EAAQE,QAAWC,IACfJ,EAAOK,QAAQC,MAAQ,gBACvBC,uBAAsB,IAAMP,EAAOK,QAAQC,MAAQ,iBAEvDJ,EAASC,QAAWC,IAChBJ,EAAOK,QAAQC,MAAQ,eACvBC,uBAAsB,IAAMP,EAAOK,QAAQC,MAAQ,eACnDE,YAAW,IAAMR,EAAOK,QAAQC,MAAQ,UAAU,OAM9D/C,SAASe,iBAAiB,oBAAqB8B,MACjCK,cAENX","sources":["./js/accordion.js","./js/index.js"],"sourcesContent":["/*\n*   This content is licensed according to the W3C Software License at\n*   https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n*\n*   Simple accordion pattern example\n*/\n\nclass Accordion {\n\n    static initAll() {\n\n        Array.prototype.slice.call(document.querySelectorAll('.Accordion')).forEach(function (el) {\n\n            // Allow for multiple accordion sections to be expanded at the same time\n            new Accordion(el);\n\n        });\n    }\n\n    constructor(el) {\n        this.el = el\n        this.allowMultiple = el.hasAttribute('data-allow-multiple');\n        // Allow for each toggle to both open and close individually\n        this.allowToggle = (this.allowMultiple) ? this.allowMultiple : el.hasAttribute('data-allow-toggle');\n\n        // Create the array of toggle elements for the accordion group\n        this.triggers = Array.prototype.slice.call(el.querySelectorAll('.Accordion-trigger'));\n        // var panels = Array.prototype.slice.call(el.querySelectorAll('.Accordion-panel'));\n\n\n        let self = this;\n        this.triggers.forEach((t) => {\n            t.onkeydown = () => console.log('go fuck yourself FF')\n            t.addEventListener('click', function(event) {\n                console.log(event.currentTarget)\n                console.log(event)\n                if (event.currentTarget.classList.contains('Accordion-trigger')) {\n                    self.toggleTarget(event.currentTarget);\n        \n                    event.preventDefault();\n                }\n            })\n        })\n\n        \n        // Bind keyboard behaviors on the main accordion container\n        el.addEventListener('keydown', this._handleKeydown.bind(this))\n\n        // Minor setup: will set disabled state, via aria-disabled, to an\n        // expanded/ active accordion which is not allowed to be toggled close\n        if (!this.allowToggle) {\n            // Get the first expanded/ active accordion\n            var expanded = el.querySelector('[aria-expanded=\"true\"]');\n\n            // If an expanded/ active accordion is found, disable\n            if (expanded) {\n                expanded.setAttribute('aria-disabled', 'true');\n            }\n        }\n    }\n\n    _handleKeydown(event) {\n        var target = event.target;\n        var key = event.key;\n\n        // Is this coming from an accordion header?\n        if (target.classList.contains('Accordion-trigger')) {\n            // Up/ Down arrow and Control + Page Up/ Page Down keyboard operations\n            // 38 = Up, 40 = Down\n            switch (key) {\n                case 'ArrowUp':\n                    var index = this.triggers.indexOf(target);\n                    var direction = -1; // (key.match(/34|40/)) ? 1 : -1;\n                    var length = this.triggers.length;\n                    var newIndex = (index + length + direction) % length;\n\n                    this.triggers[newIndex].focus();\n\n                    event.preventDefault();\n                    break;\n                case 'ArrowDown':\n                    var index = this.triggers.indexOf(target);\n                    var direction = 1; // (key.match(/34|40/)) ? 1 : -1;\n                    var length = this.triggers.length;\n                    var newIndex = (index + length + direction) % length;\n\n                    this.triggers[newIndex].focus();\n\n                    event.preventDefault();\n                    break;\n                // Go to first accordion\n                case 'Home':\n                    this.triggers[0].focus();\n                    break;\n                // Go to last accordion\n                case 'End':\n                    this.triggers[this.triggers.length - 1].focus();\n                    break;\n                case 'Enter':\n                case 'Space':\n                case ' ':\n                    this.toggleTarget(target);\n                    event.preventDefault();\n                    break;\n\n                default:\n                    console.log(key)\n                    break;\n            }\n        }\n    }\n\n    toggleTarget(target) {\n        // Check if the current toggle is expanded.\n        var isExpanded = target.getAttribute('aria-expanded') == 'true';\n        var active = this.el.querySelector('[aria-expanded=\"true\"]');\n\n        // without allowMultiple, close the open accordion\n        if (!this.allowMultiple && active && active !== target) {\n            // Set the expanded state on the triggering element\n            active.setAttribute('aria-expanded', 'false');\n            // Hide the accordion sections, using aria-controls to specify the desired section\n            document.getElementById(active.getAttribute('aria-controls')).setAttribute('hidden', '');\n\n            // When toggling is not allowed, clean up disabled state\n            if (!this.allowToggle) {\n                active.removeAttribute('aria-disabled');\n            }\n        }\n\n        if (!isExpanded) {\n            // Set the expanded state on the triggering element\n            target.setAttribute('aria-expanded', 'true');\n\n            // this is done in the CSS\n            // Hide the accordion sections, using aria-controls to specify the desired section\n            // document.getElementById(target.getAttribute('aria-controls')).removeAttribute('hidden');\n\n            // If toggling is not allowed, set disabled state on trigger\n            if (!this.allowToggle) {\n                target.setAttribute('aria-disabled', 'true');\n            }\n        }\n        else if (this.allowToggle && isExpanded) {\n            // Set the expanded state on the triggering element\n            target.setAttribute('aria-expanded', 'false');\n\n            //also done in CSS\n            // Hide the accordion sections, using aria-controls to specify the desired section\n            // document.getElementById(target.getAttribute('aria-controls')).setAttribute('hidden', '');\n        }\n    }\n}\n\nexport default Accordion;","import Accordion from './accordion';\n\nclass Navigation {\n    constructor() {\n        let main = document.getElementById('MainNav'),\n            mobile = document.getElementById('MobileMenu'),\n            openBtn = main.querySelector('.js-open'),\n            closeBtn = mobile.querySelector('.js-close')\n        \n        openBtn.onclick = (e) => {\n            mobile.dataset.state = 'entering-from'\n            requestAnimationFrame(() => mobile.dataset.state = 'entering-to')\n        }\n        closeBtn.onclick = (e) => {\n            mobile.dataset.state = 'leaving-from'\n            requestAnimationFrame(() => mobile.dataset.state = 'leaving-to')\n            setTimeout(() => mobile.dataset.state = 'closed', 200)\n        }\n\n    }\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", (e) => {\n    Accordion.initAll()\n\n    new Navigation()\n})"],"names":["$518fd2ec3475b177691f1e1fc2194a1d$export$default","Array","prototype","slice","call","document","querySelectorAll","forEach","el","constructor","this","allowMultiple","hasAttribute","allowToggle","triggers","self","t","onkeydown","console","log","addEventListener","event","currentTarget","classList","contains","toggleTarget","preventDefault","_handleKeydown","bind","expanded","querySelector","setAttribute","target","key","direction","newIndex","indexOf","length","focus","isExpanded","getAttribute","active","getElementById","removeAttribute","$3bb2299441fe5b9c7ce5af69c2e29b8e$var$Navigation","main","mobile","openBtn","closeBtn","onclick","e","dataset","state","requestAnimationFrame","setTimeout","initAll"],"version":3,"file":"publications.91d97e0b.js.map"}